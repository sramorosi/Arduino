/*
float * arc_pt(float s, float rad, float rot_cent_x, float w, float h) { // rtn point on arc
  // s is normalized arc length, w is arc width (Y dir), h is Z
  static float pt[3] = {0.0,0.0,0.0}; // [ X , Y , Z ]
  b = sqrt(pow(rad,2.0)+pow(w/2.0,2.0));   
  beta = acos(rad/b);  // half arc angle
  gamma = beta * (s-0.5); // from -beta to +beta
  // rotate the arc point by gamma
  pt[0] = b*cos(gamma)+rot_cent_x;
  pt[1] = b*sin(gamma);
  pt[2] = h;
  return pt;
}


void loop_circle() { // NOT DONE
//  CIRCLE TEST
#define R_TEST 150.0   // radius of motion circle
#define XC_TEST 200.0  // X offset of the motion circle
      ds = cmd_array[n][1] * (test_machine.dt/1000.0); // s = feed distance in mm
      dist += ds;
      //test_machine.dist += ds;
      ang += ds/R_TEST;  // feed angle in radians

      if (ang < 1.0) {
        ptC[0] = XC_TEST + R_TEST * cos(ang);
        ptC[1] = R_TEST * sin(ang);
        
        Serial.print(" , dist,");
        Serial.print(dist,3);
        Serial.print(" , ang,");
        Serial.print(ang,2); 
        
  
}

float * arc_pt(float s, float rad, float rot_cent_x, float w, float h) { // rtn point on arc
  // s is normalized arc length, w is arc width (Y dir), h is Z
  static float pt[3] = {0.0,0.0,0.0}; // [ X , Y , Z ]
  static float b, beta, gamma;
  b = sqrt(pow(rad,2.0)+pow(w/2.0,2.0));   
  beta = acos(rad/b);  // half arc angle
  gamma = beta * (s-0.5); // from -beta to +beta
  // rotate the arc point by gamma
  pt[0] = b*cos(gamma)+rot_cent_x;
  pt[1] = b*sin(gamma);
  pt[2] = h;
  return pt;
} 


void path1_loop() {
  static float *angles; // pointer to angles array
  static float time_ang,s;
  static float focal_pt[3] = {500.0,0.0,Z_PATH}; 
  static float *ptC;  // pointer to points array
  if (path1_init) {
    // first time in this function, do initialize
    //  and set the other function to require initialize
    path1_init=false; 
    path2_init=true;
    hold_init=true;  
    input_arm_init=true;
    
     // initialize joints
    jA.desired_angle = 80.0;
    jB.desired_angle = 20.0;
    jC.desired_angle = -70.0;
    jD.desired_angle = 80.0;
    jT.desired_angle = 0.0;  

    //main_ang_velo = 0.02;

  } else {
      millisTime = millis();
      time_ang = millisTime*0.001;

      s = time_ang;  //  HOW??
      ptC = arc_pt(s,R,XC,LEN_AB*1.5,Z_PATH);
      
      ptC[0] = XC + R * cos(time_ang);
      ptC[1] = R * sin(time_ang);
      ptC[2] = Z_PATH;   
    
      angles = inverse_arm_kinematics(ptC,LEN_AB,LEN_BC);
      jA.desired_angle = angles[0]*RADIAN;
      jB.desired_angle = -angles[1]*RADIAN - jA.desired_angle;
      jT.desired_angle = angles[2]*RADIAN;  

      //  wrist angle
      //jD.desired_angle = ??(ptC,focal_pt);  atan2(ptC[1],(focal_pt[0]-ptC[0]) );  // y,x

      #if SERIALOUT
        Serial.print(", A,");
        Serial.print(jA.desired_angle);
        Serial.print(", B,");
        Serial.print(jB.desired_angle);
        Serial.print(", Table,");
        Serial.print(jT.desired_angle);
        Serial.print(", Wrist,");
        Serial.print(jD.desired_angle);
      #endif
      }
    }
*/
/*
void servo_map_with_limits(joint & jt, float rate) {
// SERVO Map With RATE LIMITING, for smooth operation and to prevent damage
// Limit how much a servo angle can change in a unit time

  int dt;
  float current_velo;
  
  dt = jt.previous_millis - millis();

  current_velo = (jt.desired_angle-jt.previous_angle)/dt;
  
  if (current_velo > rate) {
    jt.previous_angle += rate*dt;
  } else if (-current_velo > rate) {
    jt.previous_angle -= rate*dt;
  } else {
    jt.previous_angle = jt.desired_angle;
  }

  // Map joint angle to the servo microsecond value
  jt.servo_ms = map(jt.previous_angle, jt.svo.low_ang, jt.svo.high_ang, jt.svo.low_ms, jt.svo.high_ms);
 
  jt.previous_millis = millis();
} */

float * inverse_arm_kinematics(point c, float l_ab, float l_bc, point d) {
  // Given arm system GroundT-TA-AB-BC-CD, where T (turntable) and A are [0,0,0]
  // The location of joint C (c[])  AND CX IS POSITIVE ONLY
  // The location of D (focal point) (where the claw should point)
  // The lengths Length AB (l_ab) and Length BC (l_bc) are specified
  // The joints A,B are on a turntable with rotation T parallel to Z through A
  // With T_angle = 0, then joints A & B are parallel to the Y axis
  // calculate the angles given pt C ***Inverse Kinematics***
  // returns an array with [A_angle,B_angle,T_angle,D_angle] in radians
  
  float xy_len, c_len, sub_angle1, sub_angle2;
  static float angles[4] = {0.0,0.0,0.0,0.0};  // [ A , B , T , D]
  static point c_new;
  
  if (c.x > 0) { //The math only works for positive Cx
    angles[2] = atan2(c.y,c.x);  // note: atan2 order; y,x

    // compute the D angle based on where C and D are on the xy plane
    xy_len = sqrt(pow((d.x-c.x),2.0)+pow((d.y-c.y),2.0)); 
    if (xy_len > 0) {  
      angles[3] = atan2((d.y-c.y),(d.x-c.x)) - angles[2];  // CD angle minus the turntable angle
    } else {
      angles[3] = 0.0; 
    }
  
    c_new = rot_pt_z(c,-angles[2]); // rotate the point c onto the XZ plane using turntable angle
    c_len = sqrt(pow(c_new.x,2)+pow(c_new.z,2));   // XZ plane
  
    if (c_len < l_ab+l_bc) {
      // case where robot arm can reach
      sub_angle1 = atan2(c_new.z,c_new.x);
      sub_angle2 = acos((pow(c_len,2)+pow(l_ab,2)-pow(l_bc,2))/(2*c_len*l_ab));
      angles[0] = sub_angle1 + sub_angle2;
      angles[1] = acos((pow(l_bc,2)+pow(l_ab,2)-pow(c_len,2))/(2*l_bc*l_ab))-180.0/RADIAN;
    } else {
      // case where robot arm can not reach point... 
      angles[0] = atan2(c_new.z,c_new.x); // a angle point in direction to go
      angles[1] = 0.0; // b is straight
    } 
  }
  return angles;  // return the angles
}

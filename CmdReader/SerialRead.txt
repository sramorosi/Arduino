// SrAmo Command Reader
#define SIZE_CMD_ARRAY 6

void setup() {
  // setup code here, to run once:
 Serial.begin(115200);
}

void getCmdSerial() { // read command from serial port
  int cmds[SIZE_CMD_ARRAY];
  int i;
  
  if (Serial.available() > 0){

    for (i=0;i<SIZE_CMD_ARRAY;i++) 
      cmds[i] = 0;  // initialize

    i=0;
    while (Serial.available() > 0) {
      cmds[i] = Serial.parseInt(); // get available ints
      i++;
    }    
    // print the command
    Serial.print("Command: ");
    for (i=0;i<SIZE_CMD_ARRAY;i++) {
      Serial.print(cmds[i]);
      Serial.print(",");
    }
    Serial.println("END");
  } 
}

void loop() {
  // put your main code here, to run repeatedly:
  getCmdSerial();
}

void loop() {
  // put your main code here, to run repeatedly:
  handelSerial();
}

// From Bald Engineer

void loop() {
   handleSerial();
   // Everything else loop() doesâ€¦
}

void handleSerial() {
 while (Serial.available() > 0) {
   char incomingCharacter = serial.Read();
   switch (incomingCharacter) {
     case '+':
      pwmValue = pwmValue + 5;
      If (pwmValue >= pwmMax)
         pwmValue = pwmMax;
      break;

     case '-':
      pwmValue = pwmValue - 5;
      If (pwmValue <= 0)
         pwmValue = 0;
      break;
    }
 }
}
Make sure you call handleSerial() often to check for commands. 
For example if you have a very long loop, call handleSerial() every so often inside that loop.
Here is a neat little trick: Send multiple characters in a row. In the serial monitor, I will often put multiple characters in before hitting send.

// From Programming Electronics Academy

//Many thanks to Nick Gammon for the basis of this code
//http://www.gammon.com.au/serial
const unsigned int MAX_MESSAGE_LENGTH = 12;

void setup() {
 Serial.begin(9600);
}

void loop() {

 //Check to see if anything is available in the serial receive buffer
 while (Serial.available() > 0)
 {
   //Create a place to hold the incoming message
   static char message[MAX_MESSAGE_LENGTH];
   static unsigned int message_pos = 0;

   //Read the next available byte in the serial receive buffer
   char inByte = Serial.read();

   //Message coming in (check not terminating character) and guard for over message size
   if ( inByte != '\n' && (message_pos < MAX_MESSAGE_LENGTH - 1) )
   {
     //Add the incoming byte to our message
     message[message_pos] = inByte;
     message_pos++;
   }
   //Full message received...
   else
   {
     //Add null character to string
     message[message_pos] = '\0';

     //Print the message (or do other things)
     Serial.println(message);

     //Reset for the next message
     message_pos = 0;
   }
 }
}

HOW TO CONVERT A CHAR TO AN INT WITH ARDUINO. function called atoi(). This will take a null-terminated string and convert it to an integer.
Strings in the c programming language are null-terminated, meaning they end with the character \0.  
The atoi() function will not work unless the string you pass in has the null-terminating character!
else
{
 //Add null character to string
 message[message_pos] = '\0';

 //Print the message (or do other things)
 Serial.println(message);

 //Or convert to integer and print
 int number = atoi(message);
 Serial.println(number);

 //Reset for the next message
 message_pos = 0;
}

// From Norwegian Creations
Here weve introduced the readStringUntil() function, which makes it possible to combine all the characters 
in the sent message into a single Arduino string. 
In this case were waiting for the \n character, which is the newline character that comes at the end of a string sent in the Arduino serial monitor.

String my_name;
 
void setup() {
    Serial.begin(9600);
 
    delay(2000);
 
    Serial.println("What is your name?");
}
 
void loop() {
    if(Serial.available()){
        my_name = Serial.readStringUntil('\n');
 
        Serial.println("Nice to meet you, " + my_name + "!");
    }
}
// EXAMPLE OF READING STRING COMMANDS
String command;
 
void setup() {
    Serial.begin(9600); 
}
 
void loop() {
    if(Serial.available()){
        command = Serial.readStringUntil('\n');
         
        if(command.equals("init")){
            initialize();
        }
        else if(command.equals("send")){
            send_message();
        }
        else if(command.equals("data")){
            get_data();
        }
        else if(command.equals("reboot")){
            reboot();
        }
        else{
            Serial.println("Invalid command");
        }
    }
}
// Using parseInt() to do this parse input into integers: lOOKS FOR THE NEXT VALID INTEGER

void loop(){
    if (Serial.available() > 0){
        int r = Serial.parseInt();
        int g = Serial.parseInt();
        int b = Serial.parseInt();
    }
}

// OR
void setup() {
  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    long myInt = Serial.parseInt(SKIP_ALL, '\n');

    // prints the received integer
    Serial.print("I received: ");
    Serial.println(myInt);
  }
}

// OR USE THE strtok() function, Split string into tokens
// If a token is found, a pointer to the beginning of the token. Otherwise, a null pointer.
// A null pointer is always returned when the end of the string (i.e., a null character) is reached in the string being scanned.

/* strtok example */
#include <stdio.h>
#include <string.h>

int main ()
{
  char str[] ="- This, a sample string.";
  char * pch;
  printf ("Splitting string \"%s\" into tokens:\n",str);
  pch = strtok (str," ,.-");
  while (pch != NULL)
  {
    printf ("%s\n",pch);
    pch = strtok (NULL, " ,.-");
  }
  return 0;
}

char array[] = "0,71,20,996.40,15";

char *strings[6]; // an array of pointers to the pieces of the above array after strtok()
char *ptr = NULL;

int Sunlight;
int Humidity;
int Temperature;
float Pressure;
int Dewpoint;

void setup()
{
   Serial.begin(115200);
   byte index = 0;
   ptr = strtok(array, ",");  // delimiter
   while (ptr != NULL)
   {
      strings[index] = ptr;
      index++;
      ptr = strtok(NULL, ",");
   }
   //Serial.println(index);
   // print all the parts
   Serial.println("The Pieces separated by strtok()");
   for (int n = 0; n < index; n++)
   {
      Serial.print(n);
      Serial.print("  ");
      Serial.println(strings[n]);
   }
   //Those values are Sunlight,Humidity,Temperature,Pressure,Dewpoint.
  // use the atoi() and atof() functions to convert ASCII strings to numbers.
   Sunlight = atoi(strings[0]); //http://www.cplusplus.com/reference/cstdlib/atoi/?kw=atoi
   Humidity = atoi(strings[1]);
   Temperature = atoi(strings[2]);
   Pressure = atof(strings[3]); //http://www.cplusplus.com/reference/cstdlib/atof/?kw=atof
   Dewpoint = atoi(strings[4]);

   Serial.print("\nSunlight = ");
   Serial.println(Sunlight);
   Serial.print("Humidity = ");
   Serial.println(Humidity);
   Serial.print("Temperature = ");
   Serial.println(Temperature);
   Serial.print("Pressure = ");
   Serial.println(Pressure);
   Serial.print("Dewpoint = ");
   Serial.println(Dewpoint);

}